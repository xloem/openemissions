/*
 * Copyright 2021 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(histogram_solve.h)                                         */
/* BINDTOOL_HEADER_FILE_HASH(714e519a91e1e76e77795e8ec7d10eba)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>

namespace py = pybind11;

#include <openemissions/histogram_solve.h>
// pydoc.h is automatically generated in the build directory
#include <histogram_solve_pydoc.h>

template <typename freq_type, typename... Doubles>
void bind_histogram_solve_template(py::module& m, const char *classname)
{

    using histogram_solve    = gr::openemissions::histogram_solve<freq_type, Doubles...>;


    py::class_<histogram_solve, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<histogram_solve>>(m, classname)

        .def(py::init(&histogram_solve::make),
           py::arg("min"),
           py::arg("max"),
           py::arg("expr"),
           py::arg("output_idx") = 0,
           py::arg("nbuckets") = 1024,
           py::arg("extrema") = std::vector<std::function<std::array<double, sizeof...(Doubles)>(Doubles...)>>(),
           D(histogram_solve,make)
        ) ;
}

void bind_histogram_solve(py::module& m)
{
    bind_histogram_solve_template<double,   double>(m, "histogram_solve_f64_1");
    bind_histogram_solve_template<float,    double>(m, "histogram_solve_f32_1");
    bind_histogram_solve_template<uint64_t, double>(m, "histogram_solve_u64_1");
    bind_histogram_solve_template<double,   double, double>(m, "histogram_solve_f64_2");
    bind_histogram_solve_template<float,    double, double>(m, "histogram_solve_f32_2");
    bind_histogram_solve_template<uint64_t, double, double>(m, "histogram_solve_u64_2");
    bind_histogram_solve_template<double,   double, double, double>(m, "histogram_solve_f64_3");
    bind_histogram_solve_template<float,    double, double, double>(m, "histogram_solve_f32_3");
    bind_histogram_solve_template<uint64_t, double, double, double>(m, "histogram_solve_u64_3");
}
