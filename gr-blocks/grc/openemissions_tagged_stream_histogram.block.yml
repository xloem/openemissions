id: openemissions_tagged_stream_histogram
label: Tagged Stream Histogram
category: '[openemissions]'

templates:
    imports: import openemissions
    make: openemissions.histogram_${input_type.fnc}_${output_type.fnc}(${min}, ${max}, ${nbuckets}, ${vinlen}, ${prop_tag_keys.split(',' if ',' in prop_tag_keys else ' ')}, ${len_tag_key})
    callbacks:
    - set_min(${min})
    - set_max(${max})

parameters:
-   id: input_type
    label: Input Type
    dtype: enum
    default: float
    options: ["Double", "Float", "Int64", "UInt64", "Int32", "Int16", "Int8", "UInt8"]
    option_attributes:
        min_guess: [-2,-2,-0x7fffffffffffffff, 0x0000000000000000,-0x7fffffff,-0x7fff,-0x7f, 0x00]
        max_guess: [ 2, 2, 0x7fffffffffffffff, 0xffffffffffffffff, 0x7fffffff, 0x7fff, 0x7f, 0xff]
        fnc: ["f64", "f32", "u64", "s32", "s16", "s8", "u8"]
        type: [f64, f32, s64, s64, s32, s16, s8, u8]
    hide: part
-   id: output_type
    label: Output Type
    dtype: enum
    default: float
    options: ["UInt64", "Float", "Double"]
    option_attributes:
        fnc: ["u64", "f32", "f64"]
        type: [s64, f32, f64]
    hide: part
-   id: min
    label: Minimum
    dtype: ${input_type}
    default: ${input_type.min_guess}
-   id: max
    label: Maximum
    dtype: ${input_type}
    default: ${input_type.max_guess}
-   id: vinlen
    label: Input Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vinlen == 1 else 'none' }
-   id: nbuckets
    label: Histogram Vec Length
    dtype: int
    default: 1024
-   id: prop_tag_keys
    label: Property Tags (a,b,...)
    dtype: string
    default: ''
    hide: ${ 'part' if prop_tag_keys == '' else 'none' }
-   id: len_tag_key
    label: Length Tag
    dtype: string
    default: 'packet_len'
#    hide: ${ 'part' if len_tag_key == 'packet_len' else 'none' }

#-   id: filename
#    label: File
#    dtype: file_open

inputs:
-   label: Input
    domain: stream
    dtype: ${ input_type.type }
    vlen: ${ vinlen }
-   label: Count Multiplier
    domain: stream
    dtype: ${ input_type.type }
    vlen: ${ vinlen }
    optional: true

outputs:
-   label: Tagged Stream Histograms
    domain: stream
    dtype: ${ output_type.type }
    vlen: ${ nbuckets }
-   label: Totals
    domain: stream
    dtype: ${ output_type.type }
    vlen: ${ nbuckets}
    optional: true

asserts:
-   ${ nbuckets > 1 }
-   ${ max > min }

documentation: |-
    Sorts incoming packet samples into histogram buckets.  If the output datatype
    can represent fractional values, they will be divided by their total counts
    to represent relative frequency.

    Every single sample, a complete histogram is output as a vector.  A different
    histogram is kept for each offset into the packet.

    Only samples within the range [Minimum,Maximum) can be included.

    If property tag keys are specified, when one is encountered an entirely new
    histogram is started, associated with that property tag value.  If a
    previous property value is encountered again, the previous histogram for that
    property value will be reused.  A new histogram is tracked for every combination
    of property tag values.

file_format: 1
