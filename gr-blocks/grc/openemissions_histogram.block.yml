id: openemissions_histogram
label: histogram
category: '[openemissions]'

templates:
    imports: import openemissions
    make: openemissions.histogram_${type.fnc}(${min}, ${max}, ${nbuckets}, ${vinlen})
    callbacks:
    - set_min(${min})
    - set_max(${max})

parameters:
-   id: input_type
    label: Input Type
    dtype: enum
    default: float
    options: [f64, f32, s64, s32, s16, s8, u8]
    option_labels: ["Double", "Float", "UInt64", "Int", "Short", "Char", "UChar"]
    option_attributes:
        min_guess: [-2,-2, 0x0000000000000000,-0x7fffffff,-0x7fff,-0x7f, 0x00]
        max_guess: [ 2, 2, 0xffffffffffffffff, 0x7fffffff, 0x7fff, 0x7f, 0xff]
        fnc: ["f64", "f32", "u64", "s32", "s16", "s8", "u8"]
    hide: part
-   id: output_type
    label: Output Type
    dtype: enum
    default: float
    options: [s64, f32, f64]
    option_labels: ["UInt64", "Float", "Double"]
    option_attributes:
        fnc: ["u64", "f32", "f64"]
    hide: part
-   id: min
    label: Minimum
    dtype: ${input_type}
    default: ${input_type.min_guess}
-   id: max
    label: Maximum
    dtype: ${input_type}
    default: ${input_type.max_guess}
-   id: vinlen
    label: Input Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vinlen == 1 else 'none' }
-   id: nbuckets
    label: Histogram Vec Length
    dtype: int
    default: 1024

inputs:
-   label: Input
    domain: stream
    dtype: ${ input_type }
    vlen: 1

outputs:
-   label: Histograms
    domain: stream
    dtype: ${ output_type }
    vlen: ${ nbuckets }

asserts:
-   ${ nbuckets > 1 }
-   ${ max > min }

documentation: |-
    Sorts incoming samples into histogram buckets.  If the output datatype
    can represent fractional values, they will be divided by the total count
    to represent relative frequency.

    Every single sample, the complete histogram is output as a vector.

    Only samples within the range [Minimum,Maximum) can be included.

file_format: 1
