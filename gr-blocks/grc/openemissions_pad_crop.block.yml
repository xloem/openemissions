id: openemissions_pad_crop
label: Tagged Stream Pad/Crop
flags: [ python, cpp ]
category: '[openemissions]'

parameters:
-   id: type
    label: IO Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short, gr.sizeof_char]
    hide: part
-   id: lengthtagname
    label: Length tag name
    dtype: string
    default: packet_len
-   id: length
    label: Output length
    dtype: int
    default: 4096
-   id: pad
    label: Pad to length?
    dtype: bool
    default: true
-   id: crop
    label: Crop to length?
    dtype: bool
    default: true

inputs:
-   domain: stream
    dtype: ${ type }

outputs:
-   domain: stream
    dtype: ${ type }

templates:
    imports: import openemissions
    make: openemissions.pad_crop(${type.size}, ${length}, ${lengthtagname}, ${pad}, ${crop})

cpp_templates:
    includes: ['#include <openmissions/pad_crop.h>']
    declarations: 'blocks::pad_crop::sprt ${id};'
    make: 'this->${id} = blocks::pad_crop::make(${type.size}, ${length}, ${lengthtagname}, ${pad}, ${crop});'

asserts:
-   ${ pad or crop }
-   ${ length > 0 }

documentation: |-
    This is a tagged stream block, which are treated specially by gnuradio.  Stream content
    is interpreted as packets, each one preceded by a tag giving its length, and the stream
    flow is adjusted so that each call to a work function operates on exactly one packet.
    Tags can be generated with a block such as Stream Tag Tools -> Stream to Tagged Stream.

    If pad is set, then short packets will be lengthened with zeros.

    If crop is set, then long packets will be cut short, losing their excess data.

    If both are set, then all packets will come out the same length.

file_format: 1
